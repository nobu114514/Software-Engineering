{"ast":null,"code":"export default {\n  name: 'CustomerOrders',\n  data() {\n    return {\n      orders: [],\n      loading: false,\n      error: '',\n      statusFilter: '',\n      timeFilter: 'desc',\n      showDetail: false,\n      selectedOrder: null\n    };\n  },\n  created() {\n    this.fetchOrders();\n  },\n  methods: {\n    async fetchOrders() {\n      this.loading = true;\n      this.error = '';\n      try {\n        // 从localStorage获取当前登录用户名\n        const customerUsername = localStorage.getItem('customerUsername');\n\n        // 构建请求参数\n        const params = {\n          status: this.statusFilter || undefined,\n          sort: this.timeFilter\n        };\n\n        // 构建请求头\n        const headers = {\n          'X-Username': customerUsername\n        };\n\n        // 发送API请求，带上筛选参数和用户信息\n        const response = await this.$axios.get(`/orders`, {\n          params: params,\n          headers: headers\n        });\n        this.orders = response.data;\n      } catch (err) {\n        this.error = '获取订单列表失败';\n        console.error(err);\n      } finally {\n        this.loading = false;\n      }\n    },\n    showOrderDetail(order) {\n      this.selectedOrder = order;\n      this.showDetail = true;\n    },\n    closeDetail() {\n      this.showDetail = false;\n      this.selectedOrder = null;\n    },\n    formatDate(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return date.toLocaleDateString('zh-CN');\n    },\n    formatDateTime(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return date.toLocaleString('zh-CN');\n    },\n    formatPrice(price) {\n      if (typeof price === 'string') {\n        price = parseFloat(price);\n      }\n      return price.toFixed(2);\n    }\n  }\n};","map":{"version":3,"names":["name","data","orders","loading","error","statusFilter","timeFilter","showDetail","selectedOrder","created","fetchOrders","methods","customerUsername","localStorage","getItem","params","status","undefined","sort","headers","response","$axios","get","err","console","showOrderDetail","order","closeDetail","formatDate","dateString","date","Date","toLocaleDateString","formatDateTime","toLocaleString","formatPrice","price","parseFloat","toFixed"],"sources":["D:\\github\\ruanjianshijian\\Software-Engineering\\litemall\\simple-shop-frontend\\frontend\\src\\views\\CustomerOrders.vue"],"sourcesContent":["<template>\r\n  <div class=\"order-list\">\r\n    <h2>我的订单</h2>\r\n    \r\n    <!-- 筛选条件 -->\r\n    <div class=\"filter-section\">\r\n      <div class=\"filter-item\">\r\n        <label for=\"status-filter\">订单状态：</label>\r\n        <select id=\"status-filter\" v-model=\"statusFilter\" @change=\"fetchOrders\">\r\n          <option value=\"\">全部状态</option>\r\n          <option value=\"pending\">待处理</option>\r\n          <option value=\"completed\">已完成</option>\r\n        </select>\r\n      </div>\r\n      <div class=\"filter-item\">\r\n        <label for=\"time-filter\">时间排序：</label>\r\n        <select id=\"time-filter\" v-model=\"timeFilter\" @change=\"fetchOrders\">\r\n          <option value=\"desc\">最新优先</option>\r\n          <option value=\"asc\">最早优先</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 加载状态 -->\r\n    <div v-if=\"loading\" class=\"loading\">加载中...</div>\r\n\r\n    <!-- 错误提示 -->\r\n    <div v-if=\"error\" class=\"alert alert-danger\">{{ error }}</div>\r\n\r\n    <!-- 订单列表 -->\r\n    <div v-if=\"orders.length > 0\" class=\"orders-container\">\r\n      <div v-for=\"order in orders\" :key=\"order.id\" class=\"order-card card\">\r\n        <div class=\"order-header\">\r\n          <span class=\"order-id\">订单号: {{ order.id }}</span>\r\n          <span class=\"order-time\">{{ formatDate(order.created_at) }}</span>\r\n        </div>\r\n        \r\n        <div class=\"order-content\">\r\n          <div class=\"product-info\">\r\n            <span class=\"product-name\">{{ order.product_name }}</span>\r\n            <span class=\"order-amount\">¥{{ order.price ? formatPrice(order.price) : '0.00' }}</span>\r\n          </div>\r\n          \r\n          <div class=\"order-status\">\r\n            <span class=\"status-badge\" :class=\"order.is_completed ? 'status-completed' : 'status-pending'\">{{ order.is_completed ? '已完成' : '待处理' }}</span>\r\n            <button class=\"btn btn-secondary\" @click=\"showOrderDetail(order)\">查看详情</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 无订单提示 -->\r\n    <div v-else-if=\"!loading\" class=\"alert alert-info\">暂无订单记录</div>\r\n\r\n    <!-- 订单详情弹窗 -->\r\n    <div v-if=\"showDetail\" class=\"modal-overlay\" @click.self=\"closeDetail\">\r\n      <div class=\"modal-content card\">\r\n        <div class=\"modal-header\">\r\n          <h3>订单详情</h3>\r\n          <button class=\"close-btn\" @click=\"closeDetail\">×</button>\r\n        </div>\r\n        \r\n        <div class=\"modal-body\" v-if=\"selectedOrder\">\r\n\r\n          <div class=\"detail-item\">\r\n            <label>订单编号：</label>\r\n            <span>{{ selectedOrder.id }}</span>\r\n          </div>\r\n          <div class=\"detail-item\">\r\n            <label>商品名称：</label>\r\n            <span>{{ selectedOrder.product_name }}</span>\r\n          </div>\r\n          <div class=\"detail-item\">\r\n            <label>订单金额：</label>\r\n            <span>¥{{ selectedOrder.price ? formatPrice(selectedOrder.price) : '0.00' }}</span>\r\n          </div>\r\n          <div class=\"detail-item\">\r\n            <label>收货人：</label>\r\n            <span>{{ selectedOrder.buyer_name }}</span>\r\n          </div>\r\n          <div class=\"detail-item\">\r\n            <label>联系电话：</label>\r\n            <span>{{ selectedOrder.phone }}</span>\r\n          </div>\r\n          <div class=\"detail-item\">\r\n            <label>收货地址：</label>\r\n            <span>{{ selectedOrder.address }}</span>\r\n          </div>\r\n          <div class=\"detail-item\">\r\n            <label>订单备注：</label>\r\n            <span>{{ selectedOrder.notes || '无' }}</span>\r\n          </div>\r\n          <div class=\"detail-item\">\r\n            <label>下单时间：</label>\r\n            <span>{{ formatDateTime(selectedOrder.created_at) }}</span>\r\n          </div>\r\n          <div class=\"detail-item\">\r\n            <label>订单状态：</label>\r\n            <span class=\"status-badge\" :class=\"selectedOrder.is_completed ? 'status-completed' : 'status-pending'\">{{ selectedOrder.is_completed ? '已完成' : '待处理' }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'CustomerOrders',\r\n  data() {\r\n    return {\r\n      orders: [],\r\n      loading: false,\r\n      error: '',\r\n      statusFilter: '',\r\n      timeFilter: 'desc',\r\n      showDetail: false,\r\n      selectedOrder: null\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchOrders()\r\n  },\r\n  methods: {\r\n    async fetchOrders() {\r\n      this.loading = true\r\n      this.error = ''\r\n      \r\n      try {\r\n        // 从localStorage获取当前登录用户名\r\n        const customerUsername = localStorage.getItem('customerUsername')\r\n        \r\n        // 构建请求参数\r\n        const params = {\r\n          status: this.statusFilter || undefined,\r\n          sort: this.timeFilter\r\n        }\r\n        \r\n        // 构建请求头\r\n        const headers = {\r\n          'X-Username': customerUsername\r\n        }\r\n        \r\n        // 发送API请求，带上筛选参数和用户信息\r\n        const response = await this.$axios.get(`/orders`, {\r\n          params: params,\r\n          headers: headers\r\n        })\r\n        \r\n        this.orders = response.data\r\n      } catch (err) {\r\n        this.error = '获取订单列表失败'\r\n        console.error(err)\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    \r\n    showOrderDetail(order) {\r\n      this.selectedOrder = order\r\n      this.showDetail = true\r\n    },\r\n    \r\n    closeDetail() {\r\n      this.showDetail = false\r\n      this.selectedOrder = null\r\n    },\r\n    \r\n    formatDate(dateString) {\r\n      if (!dateString) return ''\r\n      const date = new Date(dateString)\r\n      return date.toLocaleDateString('zh-CN')\r\n    },\r\n    \r\n    formatDateTime(dateString) {\r\n      if (!dateString) return ''\r\n      const date = new Date(dateString)\r\n      return date.toLocaleString('zh-CN')\r\n    },\r\n    \r\n    formatPrice(price) {\r\n      if (typeof price === 'string') {\r\n        price = parseFloat(price)\r\n      }\r\n      return price.toFixed(2)\r\n    },\r\n    \r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.order-list {\r\n  max-width: 1000px;\r\n  margin: 0 auto;\r\n  padding: 20px 0;\r\n}\r\n\r\n.filter-section {\r\n  display: flex;\r\n  gap: 20px;\r\n  margin-bottom: 20px;\r\n  padding: 15px;\r\n  background-color: #f8f9fa;\r\n  border-radius: 8px;\r\n}\r\n\r\n.filter-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.filter-item label {\r\n  font-weight: 500;\r\n}\r\n\r\n.filter-item select {\r\n  padding: 6px 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n}\r\n\r\n.orders-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n}\r\n\r\n.order-card {\r\n  padding: 20px;\r\n  border: 1px solid #eee;\r\n  border-radius: 8px;\r\n  background-color: white;\r\n  transition: box-shadow 0.3s;\r\n}\r\n\r\n.order-card:hover {\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.order-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 15px;\r\n  padding-bottom: 10px;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.order-id {\r\n  font-weight: 600;\r\n  color: #333;\r\n}\r\n\r\n.order-time {\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.order-content {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.product-info {\r\n  flex: 1;\r\n}\r\n\r\n.product-name {\r\n  font-weight: 500;\r\n  color: #333;\r\n  margin-right: 15px;\r\n}\r\n\r\n.order-amount {\r\n  font-weight: 600;\r\n  color: #E02E24;\r\n  font-size: 18px;\r\n}\r\n\r\n.order-status {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.status-badge {\r\n  padding: 4px 8px;\r\n  border-radius: 12px;\r\n  font-size: 12px;\r\n  font-weight: 500;\r\n}\r\n\r\n.status-pending {\r\n  background-color: #fff3cd;\r\n  color: #856404;\r\n}\r\n\r\n.status-completed {\r\n  background-color: #d4edda;\r\n  color: #155724;\r\n}\r\n\r\n.status-cancelled {\r\n  background-color: #f8d7da;\r\n  color: #721c24;\r\n}\r\n\r\n.loading {\r\n  text-align: center;\r\n  padding: 40px;\r\n  font-size: 16px;\r\n  color: #666;\r\n}\r\n\r\n/* 模态框样式 */\r\n.modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.modal-content {\r\n  max-width: 500px;\r\n  width: 90%;\r\n  max-height: 80vh;\r\n  overflow-y: auto;\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.modal-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.modal-header h3 {\r\n  margin: 0;\r\n  color: #333;\r\n}\r\n\r\n.close-btn {\r\n  background: none;\r\n  border: none;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n  color: #666;\r\n  padding: 0;\r\n  width: 30px;\r\n  height: 30px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 50%;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.close-btn:hover {\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n.modal-body {\r\n  padding: 20px;\r\n}\r\n\r\n.detail-item {\r\n  display: flex;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.detail-item:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.detail-item label {\r\n  width: 100px;\r\n  font-weight: 500;\r\n  color: #666;\r\n}\r\n\r\n.detail-item span {\r\n  flex: 1;\r\n  color: #333;\r\n}\r\n</style>"],"mappings":"AA2GA,eAAe;EACbA,IAAI,EAAE,gBAAgB;EACtBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,EAAE;MACTC,YAAY,EAAE,EAAE;MAChBC,UAAU,EAAE,MAAM;MAClBC,UAAU,EAAE,KAAK;MACjBC,aAAa,EAAE;IACjB;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,WAAW,CAAC;EACnB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,WAAWA,CAAA,EAAG;MAClB,IAAI,CAACP,OAAM,GAAI,IAAG;MAClB,IAAI,CAACC,KAAI,GAAI,EAAC;MAEd,IAAI;QACF;QACA,MAAMQ,gBAAe,GAAIC,YAAY,CAACC,OAAO,CAAC,kBAAkB;;QAEhE;QACA,MAAMC,MAAK,GAAI;UACbC,MAAM,EAAE,IAAI,CAACX,YAAW,IAAKY,SAAS;UACtCC,IAAI,EAAE,IAAI,CAACZ;QACb;;QAEA;QACA,MAAMa,OAAM,GAAI;UACd,YAAY,EAAEP;QAChB;;QAEA;QACA,MAAMQ,QAAO,GAAI,MAAM,IAAI,CAACC,MAAM,CAACC,GAAG,CAAC,SAAS,EAAE;UAChDP,MAAM,EAAEA,MAAM;UACdI,OAAO,EAAEA;QACX,CAAC;QAED,IAAI,CAACjB,MAAK,GAAIkB,QAAQ,CAACnB,IAAG;MAC5B,EAAE,OAAOsB,GAAG,EAAE;QACZ,IAAI,CAACnB,KAAI,GAAI,UAAS;QACtBoB,OAAO,CAACpB,KAAK,CAACmB,GAAG;MACnB,UAAU;QACR,IAAI,CAACpB,OAAM,GAAI,KAAI;MACrB;IACF,CAAC;IAEDsB,eAAeA,CAACC,KAAK,EAAE;MACrB,IAAI,CAAClB,aAAY,GAAIkB,KAAI;MACzB,IAAI,CAACnB,UAAS,GAAI,IAAG;IACvB,CAAC;IAEDoB,WAAWA,CAAA,EAAG;MACZ,IAAI,CAACpB,UAAS,GAAI,KAAI;MACtB,IAAI,CAACC,aAAY,GAAI,IAAG;IAC1B,CAAC;IAEDoB,UAAUA,CAACC,UAAU,EAAE;MACrB,IAAI,CAACA,UAAU,EAAE,OAAO,EAAC;MACzB,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAACF,UAAU;MAChC,OAAOC,IAAI,CAACE,kBAAkB,CAAC,OAAO;IACxC,CAAC;IAEDC,cAAcA,CAACJ,UAAU,EAAE;MACzB,IAAI,CAACA,UAAU,EAAE,OAAO,EAAC;MACzB,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAACF,UAAU;MAChC,OAAOC,IAAI,CAACI,cAAc,CAAC,OAAO;IACpC,CAAC;IAEDC,WAAWA,CAACC,KAAK,EAAE;MACjB,IAAI,OAAOA,KAAI,KAAM,QAAQ,EAAE;QAC7BA,KAAI,GAAIC,UAAU,CAACD,KAAK;MAC1B;MACA,OAAOA,KAAK,CAACE,OAAO,CAAC,CAAC;IACxB;EAGF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}