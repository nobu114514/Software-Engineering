# 测试用例自动化运行手册

## 1. 环境准备

### 1.1 前置依赖
- JDK 11+（确保 `JAVA_HOME` 环境变量配置正确）
- MySQL 8.0+（用于数据库库连接信息需与后端配置一致）
- Node.js 14+（用于前端依赖安装和运行）
- Maven 3.6+（用于后端项目构建和测试）
- IDE（推荐IntelliJ IDEA或VS Code，需安装JUnit、Vue相关插件）


### 1.2 项目初始化
1. **数据库配置**
   - 按照 `Software-Engineering/litemall/说明.txt` 执行数据库初始化：
     ```sql
     -- 创建数据库
     CREATE DATABASE simple_shop CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
     -- 执行表结构脚本（包含product、purchase_intention、seller等表）
     -- 初始化卖家数据（用户名：seller，密码：123）
     ```
   - 修改后端配置文件 `src/main/resources/application.properties`，更新数据库连接信息：
     ```properties
     spring.datasource.url=jdbc:mysql://localhost:3306/simple_shop?useSSL=false&serverTimezone=UTC
     spring.datasource.username=你的MySQL用户名
     spring.datasource.password=你的MySQL密码
     ```

2. **后端项目构建**
   - 进入后端项目根目录（包含 `pom.xml` 的目录）：
     ```bash
     # 构建项目并运行单元测试
     mvn clean package
     # 跳过测试直接构建（如需）
     mvn clean package -DskipTests
     ```

3. **前端项目准备**
   - 进入前端项目目录 `simple-shop-frontend/frontend`：
     ```bash
     # 安装依赖
     npm install
     # 安装开发依赖（如已在说明.txt中提及）
     npm install --save-dev eslint eslint-plugin-vue @babel/eslint-parser @babel/core @babel/preset-env
     ```


## 2. 自动化测试范围

### 2.1 后端接口测试
- 基于 JUnit 5 + Spring MockMvc 的接口功能测试（如商品冻结/解冻、购买意向提交等）
- 核心测试类：`com.shop.test.buyer.BuyerFunctionTest`（示例中报错的测试类）

### 2.2 前端功能测试
- 通过Selenium 扩展，测试前端页面交互（如商品列表展示、购买意向提交等）


## 3. 自动化测试运行步骤

### 3.1 后端接口测试运行

#### 方式1：通过IDE运行
1. 打开后端项目（`simple-shop-backend`）
2. 定位到测试类目录（通常在 `src/test/java` 下）
3. 右键点击目标测试类（如 `BuyerFunctionTest`）或测试方法
4. 选择 "Run Tests" 或 "Debug Tests" 执行测试

#### 方式2：通过Maven命令运行
```bash
# 运行所有测试
mvn test

# 运行指定测试类（示例）
mvn test -Dtest=BuyerFunctionTest

# 运行指定测试方法（示例）
mvn test -Dtest=BuyerFunctionTest#testSubmitPurchaseIntention
```


### 3.2 测试结果查看
1. **控制台输出**：测试通过/失败的用例数、错误信息（如 `No value at JSON path "$.isFrozen"` 等）
2. **测试报告**：Maven 会在 `target/surefire-reports` 目录生成 HTML/XML 格式报告，可直接打开查看详情


## 4. 常见问题及解决

### 4.1 数据库相关问题
- **问题**：测试时数据库连接失败
  **解决**：检查 `application.properties` 中数据库地址、用户名、密码是否正确；确保MySQL服务已启动。

- **问题**：测试数据冲突（如重复插入初始卖家数据）
  **解决**：在测试类中添加 `@BeforeEach` 注解的方法，初始化测试数据前清理表数据：
  ```java
  @BeforeEach
  void setUp() {
      // 清空购买意向表和商品表数据（示例）
      jdbcTemplate.update("DELETE FROM purchase_intention");
      jdbcTemplate.update("DELETE FROM product");
  }
  ```


### 4.2 接口测试断言失败
- **问题**：`No value at JSON path "$.isFrozen"`（如历史报错）
  **解决**：根据 `debug.txt` 记录，后端 `isFrozen` 字段序列化后为 `frozen`，需将测试中的 JSON 路径修正为 `$.frozen`：
  ```java
  // 错误
  .andExpect(jsonPath("$.isFrozen").value(true));
  // 正确
  .andExpect(jsonPath("$.frozen").value(true));
  ```

- **问题**：接口返回状态码不符合预期（如 404 而非 200）
  **解决**：检查测试中请求的接口路径是否正确（如 `/buyers/product/1` 是否存在），或后端控制器是否正确映射该路径。


### 4.3 前端依赖安装失败
- **问题**：`npm install` 时报错
  **解决**：清除 npm 缓存后重试：
  ```bash
  npm cache clean --force
  npm install
  ```

